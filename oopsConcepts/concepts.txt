1. Data hiding
2. Abstraction
3. Encapsulation
4. Tightly Encapsulation
5. Is- a relationship
6. has- a relationship
7. method signature
8. over loading 
9. over riding
10. method hiding
11. static control flow 
12. instance control flow
13. constructors 
14. coupling 
15. type_casting

//basics
1. Data hiding: hiding of data is performed by private modifier
outside person can not access our data
class Account{
    private long accountNo = 1993434; 
}

2. Abstraction : hiding the implementation details and  highlite teh set 
of services
abstract class abs{
    public abstract void functionSay();
}
class xyz extends abs{
    public abstract void functionSay{
        System.out.println("code :my code defines my language of love with computer");
    }
}

3. Encapsulation : Encapsulation data with method is called Encapsulation
 Encapsulation = DataHiding + Abstraction;
 class abs{
    private int accNo;
    public void setAccNo(int acc){
        accNo = acc;
    }
    public int getaccNo(){
        return accNo;
    }
 } 

4. Tightly Encapsulation class: all data members are priavate 

5. Is-a relationship: this is also know as inheritance by using extends keyword
it increate code reuseability
class Abs{
    public void functionSay(){
        System.out.println("inheritance is all about hiding data and making code reusable");
    }
}
class AbsMaster{
    public void m2(){}
    public static void main(){
        //1st case
        AbsMaster am = new AbsMaster();
        am.functionSay();
        am.m2();

        //2nd case
        Abs a = new abs();
        a.functionSay();
        //a.m2(); m2 is chiled function which is unkown to Abs //not valid        

        //3rd case
        Abs works = new AbsMaster();
        Abs.functionSay();
        //abs.m2 invalid 

        //4rd case
        AbsMaster abm = new Abs // invalid
    }
}

object class is available to all java class, if a java class don't not inherite 
any class then this is the child of object class like
class A extends B{

}

then A is child of B
B is child of object

6. Has-a relationship: has a relationship is also known as 'composition and aggerigataion'
there is no spacified keyword for this but we often uses new keyword
class Car{
    Engine engine = new Engine(); 
}

7. method signature:  a method signature consists of the method name and the parameter list.
The parameter list includes the data types and names of the parameters, and the order in which they appear.
The basic syntax for a method signature in Java is:
returnType methodName(parameterType1 parameterName1, parameterType2 parameterName2, ...);


8,9,10. polymorephism:Polymorphism is a fundamental concept in object-oriented programming that allows objects of different classes
to be treated as if they are objects of the same class. 
In Java, polymorphism is achieved through two mechanisms:
1. method overloading 
2. method overriding

1. method overloading: Method overloading is a technique in which two or more methods in the same class have the same name 
but different parameter lists. Java uses the number, type, and order of the parameters to distinguish between the different
versions of the method.

2.method overriding: method overriding is a mechanism that allows a subclass to provide its own implementation of a
method that is already provided by its parent class. When a method in a subclass has the same name, return type,
and parameter list as a method in its parent class, it is said to override the parent class's method.

The method in the subclass must have the same name, return type, and parameter list as the method in the parent class.
java
Copy code
public class Animal {
    public void makeSound() {
        System.out.println("The animal makes a sound");
    }
}

public class Cat extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Meow!");
    }
}
The access modifier of the method in the subclass cannot be more restrictive than the access modifier of the method in the parent class.
java
Copy code
public class Animal {
    public void makeSound() {
        System.out.println("The animal makes a sound");
    }
}

public class Cat extends Animal {
    // This will cause a compile-time error, because the
    // access modifier is more restrictive than the parent class's
    // method.
    // @Override
    // private void makeSound() {
    //     System.out.println("Meow!");
    // }
    
    @Override
    public void makeSound() {
        System.out.println("Meow!");
    }
}
The return type of the method in the subclass can be a subclass of the return type of the method in the parent class.
java
Copy code
public class Animal {
    public Animal reproduce() {
        return new Animal();
    }
}

public class Cat extends Animal {
    @Override
    public Cat reproduce() {
        return new Cat();
    }
}
The method in the subclass cannot throw more checked exceptions than the method in the parent class. However, it can throw fewer or no exceptions, or throw unchecked exceptions.
java
Copy code
import java.io.IOException;

public class Animal {
    public void makeSound() throws IOException {
        // do something
    }
}

public class Cat extends Animal {
    // This will cause a compile-time error, because
    // FileNotFoundException is a more restrictive checked
    // exception than IOException.
    // @Override
    // public void makeSound() throws FileNotFoundException {
    //     // do something
    // }
    
    // This is allowed, because IOException is the same
    // or less restrictive than the parent class's method.
    @Override
    public void makeSound() throws IOException {
        // do something
    }
    
    // This is allowed, because NullPointerException is
    // an unchecked exception.
    @Override
    public void makeSound() throws NullPointerException {
        // do something
    }
    
    // This is also allowed, because the subclass can choose
    // not to throw any exceptions at all.
    @Override
    public void makeSound() {
        // do something
    }
}
If you override a method and want to call the parent class's version of the method from within the subclass, you can use the super keyword to refer to the parent class.
java
Copy code
public class Animal {
    public void makeSound() {
        System.out.println("The animal makes a sound");
    }
}

public class Cat extends Animal {
    @Override
    public void makeSound() {
        super.makeSound(); // calls the parent class's version of the method
        System.out.println("Meow!");
    }
}


Method hiding: Method hiding is a concept in Java where a subclass defines a static method with
the same name and signature as a static method in its superclass. When the method is called on 
an object of the subclass, the subclass's method is called instead of the parent class's method.


11. Static control flow: Static control flow refers to the sequence in which static blocks, static variables,
and static methods are initialized or executed in a Java program. 
*The static control flow is executed when the class is loaded into memory and it is performed only once per class loading.

The static control flow in Java follows a specific sequence:
a. When a class is loaded into memory, all the static variables declared in the class are initialized with their default
values (e.g., zero for int, false for boolean).
b. If the class has any static blocks, they are executed in the order they appear in the class.
c. Next, the static variables are initialized with their explicit values or with the values assigned in static blocks,
in the order they appear in the class.
d. Finally, if there are any static methods in the class, they can be executed.

example in StaticFlowExample file

12. Instance control flow: Instance control flow refers to the sequence in which instance variables and instance blocks are initialized
or executed in a Java program. The instance control flow is executed every time an object of the class is created.

example1 in file InstanceFlowExample.java 

13. Constructors:In Java, a constructor is a special method that is invoked when an object of a class is created.
The purpose of a constructor is to initialize the object's state or to perform any other tasks required to set up the object.

A constructor has the same name as the class in which it is defined and does not have a return type, not even void. 
A constructor can have parameters, which are used to pass arguments to the constructor when creating an object.

rules for constructor in java:
The name of the constructor must be the same as the name of the class.
Constructors do not have a return type, not even void.
class test{
    void test() //this is a normal function not a constructor 
}
Constructors can be declared with different access modifiers such as public, private, or protected, to control their visibility.

a. singleton class: if we allow to create only one object of a class then it is called singleton class
   ex: Runtime ,ActionServlet
   Runtime r1 = Runtime.getRuntime();
   Runtime r2 = Runtime.getRuntime();
   Runtime r3 = Runtime.getRuntime();
   .
   .
   .
   Runtime rn = Runtime.getRuntime();
   Create our own singleton class:
   watch SingletonClass.java file

b. default constructor : The default constructor is a constructor that is automatically
generated by the Java compiler if no other constructor is defined explicitly in a class.

*The default constructor has no arguments.
*The accessmodifiers of default constructor in same as class modifier but this rules works only with 
public and <default>
*The default constructor constains only one line that is call to the super class constructor.
test(){
    super();
}

c. super and this : The first line inside the constructor should be this() or super();
*if we not write, the compiler always add super() as first line 
class test{
    test(){
        //S.o.p("hello") this will cause an error
        super();
    }
}
*we can use super() or this but not both simaltaniously
class test{
    test(){
        super();
        //this() this produce an error
    }
}
* we can use super() and this inside constructor if we use it outside we will get C.E.

super and this keywords(instance members): This can be use anywhere except in static area
super is used to refer to the parent class of a subclass.
this is used to refer to the current instance of a class.


14. Coupling: Coupling in Java refers to the degree of dependency between two classes. It measures 
how closely two classes are related to each other. There are different types of coupling, ranging from low to high, 
and each has a different impact on the maintainability, extensibility, and reusability of the code.

a. Loose Coupling: Loose coupling is a design principle that promotes independence between classes. 
In this system one class have minimal knowledge of the other classes.
This is achieved by using interfaces or abstract classes to define common behavior between classes,
which allows for easy substitution of one class for another.

interface Animal {
  void makeSound();
}

class Cat implements Animal {
  void makeSound() {
    System.out.println("Meow");
  }
}

class Dog implements Animal {
  void makeSound() {
    System.out.println("Woof");
  }
}

Animal animalObj = new Cat();
animalObj.makeSound(); // "Meow"

b. Tight Coupling: Tight coupling occurs when two classes are highly dependent on each other. In a tightly coupled system,
changes in one class can have a direct impact on the other class, making the system difficult to maintain and extend.
This can lead to a lot of redundant code and make it hard to reuse code in other parts of the system.

class Payment {
  void processPayment() {
    // code to process payment
  }
}

class ShoppingCart {
  private Payment payment;

  ShoppingCart() {
    payment = new Payment(); // tight coupling
  }

  void checkout() {
    payment.processPayment(); // tightly coupled to the Payment class
  }
}
Cohesion
Cohesion refers to the degree to which the elements of a class are related to each other. A highly cohesive class has elements that are closely related to each other and work together to achieve a common goal. This makes the class easier to understand, maintain, and extend.

class Order {
  private Customer customer;
  private List<Item> items;
  private double total;

  Order(Customer customer, List<Item> items) {
    this.customer = customer;
    this.items = items;
    calculateTotal();
  }

  private void calculateTotal() {
    // code to calculate the total cost of the order
  }

  // getters and setters
}
In the above example, the elements of the Order class (customer, items, and total) are closely related to each other 
and work together to represent an order. This makes the class highly cohesive.

In summary, designing classes with loose coupling and high cohesion can improve the maintainability, extensibility, 
and reusability of the code. It's important to keep these principles in mind when designing software systems.



15. type casting:Type casting in Java is the process of converting a value of one data type to another. 
Java supports two types of type casting: implicit and explicit.

Implicit type casting, also known as widening conversion, happens when the value of a smaller data 
type is automatically converted to a larger data type. For example, converting an integer to a float:

int myInt = 10;
float myFloat = myInt; // implicit type casting

Explicit type casting, also known as narrowing conversion, happens when the value of a larger data type is 
explicitly converted to a smaller data type. For example, converting a double to an int:

double myDouble = 10.5;
int myInt = (int) myDouble; // explicit type casting

Note that when using explicit type casting, there is a risk of data loss or overflow if the value of the original data type
is outside the range of the target data type. It is important to use explicit type casting carefully and to ensure that the 
resulting value is valid for the target data type.

According to data type: There are two types of casting in Java: primitive type casting and object type casting.

a. Primitive Type Casting: Primitive type casting involves converting one primitive data type to another.
In general, there are two types of primitive type casting: widening conversion and narrowing conversion.
Widening Conversion: Widening conversion occurs when a value of a smaller data type is converted to a larger data type.
For example, when you convert an int to a double, you are widening the conversion.
int num1 = 10;
double num2 = num1; // widening conversion from int to double

b. Narrowing Conversion: Narrowing conversion occurs when a value of a larger data type is converted to a smaller data type.
double num1 = 10.5;
int num2 = (int) num1; // narrowing conversion from double to int

2. Object Type Casting: Object type casting involves converting one object type to another. In Java, there are two types 
of object type casting: upcasting and downcasting.

a. Upcasting: Upcasting occurs when a subclass object is converted to a superclass object. 
This is done automatically by Java and does not require an explicit cast.
class Animal {
  void makeSound() {
    System.out.println("Animal is making a sound");
  }
}

class Cat extends Animal {
  void makeSound() {
    System.out.println("Meow");
  }
}

Animal catObj = new Cat(); // upcasting from Cat to Animal

b. Downcasting: Downcasting occurs when a superclass object is converted to a subclass object. This type of casting requires 
an explicit cast and can result in a ClassCastException if the object being cast is not actually an instance of the subclass.

Animal animalObj = new Cat();
Cat catObj = (Cat) animalObj; // downcasting from Animal to Cat

NOTE : It's important to note that object type casting is not always possible. For example, you cannot cast an object of
one class to an object of another class if they are not related by inheritance or if one class does not implement an interface
that the other class extends or implements.

16
