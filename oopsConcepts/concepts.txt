1. Data hiding
2. Abstraction
3. Encapsulation
4. Tightly Encapsulation
5. Is- a relationship
6. has- a relationship
7. method signature
8. over loading 
9. over riding
10. method hiding
11. static control flow 
12. instance control flow
13. constructors 
14. coupling 
15. cohesion
16. type_casting

//basics
1. Data hiding: hiding of data is performed by private modifier
outside person can not access our data
class Account{
    private long accountNo = 1993434; 
}

2. Abstraction : hiding the implementation details and  highlite teh set 
of services
abstract class abs{
    public abstract void functionSay();
}
class xyz extends abs{
    public abstract void functionSay{
        System.out.println("code :my code defines my language of love with computer");
    }
}

3. Encapsulation : Encapsulation data with method is called Encapsulation
 Encapsulation = DataHiding + Abstraction;
 class abs{
    private int accNo;
    public void setAccNo(int acc){
        accNo = acc;
    }
    public int getaccNo(){
        return accNo;
    }
 } 

4. Tightly Encapsulation class: all data members are priavate 

5. Has- a relationship: this is also know as inheritance by using extends keyword
it increate code reuseability
class Abs{
    public void functionSay(){
        System.out.println("inheritance is all about hiding data and making code reusable");
    }
}
class AbsMaster{
    public void m2(){}
    public static void main(){
        //1st case
        AbsMaster am = new AbsMaster();
        am.functionSay();
        am.m2();

        //2nd case
        Abs a = new abs();
        a.functionSay();
        //a.m2(); m2 is chiled function which is unkown to Abs //not valid        

        //3rd case
        Abs works = new AbsMaster();
        Abs.functionSay();
        //abs.m2 invalid 

        //4rd case
        AbsMaster abm = new Abs // invalid
    }
}

object class is available to all java class, if a java class don't not inherite 
any class then this is the child of object class like
class A extends B{

}

then A is child of B
B is child of object

method signature:  a method signature consists of the method name and the parameter list.
The parameter list includes the data types and names of the parameters, and the order in which they appear.
The basic syntax for a method signature in Java is:
returnType methodName(parameterType1 parameterName1, parameterType2 parameterName2, ...);


polymorephism:Polymorphism is a fundamental concept in object-oriented programming that allows objects of different classes
to be treated as if they are objects of the same class. 
In Java, polymorphism is achieved through two mechanisms:
 method overloading and method overriding